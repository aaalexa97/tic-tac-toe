{"version":3,"sources":["Square.js","Board.js","Game.js","serviceWorker.js","index.js"],"names":["SquareButton","withStyles","root","borderRadius","background","border","borderStyle","borderColor","color","height","width","fontSize","disabled","label","textTransform","Button","Square","props","onClick","value","ReturnButton","padding","marginTop","marginBottom","marginLeft","boxShadow","calcWin","squares","wins","i","length","a","b","c","Board","state","Array","fill","isXNext","moves","this","slice","dis","xIsNext","setState","handleClick","status","win","tie","tieGame","className","renderSquare","variant","window","location","reload","React","Component","Game","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9aa85fad.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst SquareButton = withStyles({\n    root: {\n      borderRadius: '0',\n      background: 'white',\n      '&:hover': {background: '#21CBF3',},\n      border: '1px',\n      borderStyle: 'solid',\n      borderColor: 'black',\n      color: 'black',\n      height: '100px',\n      width: '100px',\n      fontSize: '3em',\n    },\n    disabled: {\n      borderRadius: '0',\n      background: 'white',\n      borderStyle: 'solid',\n      border: '1px',\n      borderColor: 'black',\n      height: '100px',\n      width: '100px',\n      fontSize: '3em',\n      color: 'black',\n    },\n    label: {\n      textTransform: 'capitalize',\n    },\n  })(Button);\n\n    function Square(props){\n        return (\n\n            <SquareButton disabled={props.disabled} onClick = {props.onClick}>\n                {props.value}\n            </SquareButton>\n\n        )\n    }\n\nexport default Square;\n","import React from 'react';\nimport './index.css';\nimport Square from './Square.js';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst ReturnButton =  withStyles({\n    root: {\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n      borderRadius: 3,\n      border: 0,\n      color: 'white',\n      height: 48,\n      padding: '0 30px',\n      marginTop: '10px',\n      marginBottom: '10px',\n      marginLeft: '67px',\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    },\n  })(Button);\n\nclass Board extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            squares: Array(9).fill(null),\n            isXNext: false,\n            moves: 0,\n            disabled: Array(9).fill(false),\n        };\n    }\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        const dis = this.state.disabled.slice();\n        if(calcWin(squares) || squares[i]){\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'O' : 'X';\n        dis[i] = true;\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n            moves: this.state.moves + 1,\n            disabled: dis,\n        });\n      }\n    renderSquare(i){\n        return ( <Square\n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}\n        disabled = {this.state.disabled[i]}\n      />);\n    }\n    render() {\n        const win = calcWin(this.state.squares);\n        const tie = tieGame(this.state.moves);\n        let status;\n        if(win){\n            status = \"Winner: \" + win;\n        }\n        else if(tie){\n            status = tie;\n        }\n        else{\n            status = 'Next player: ' + (this.state.xIsNext ? 'O' : 'X');\n        }\n\n        return(\n            <div>\n                <div className=\"title\">Tic Tac Toe</div>\n                <div className=\"row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n\n                <div className=\"status\">{status} </div>\n\n                <ReturnButton variant=\"contained\" color=\"primary\" onClick={() => window.location.reload(false)}>restart game</ReturnButton>\n            </div>\n        );\n    }\n}\n\n\nfunction tieGame(moves){\n    if (moves === 9){\n        return \"Tie Game\";\n    }\n\n    return null;\n}\n\nfunction calcWin(squares){\n    const wins = [\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6],\n    ];\n\n    for (let i = 0; i < wins.length; i++){\n        const[a,b,c] = wins[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n            return squares[a];\n        }\n    }\n    return null;\n}\n\n\n\nexport default Board;","import React from 'react';\nimport './index.css';\nimport Board from './Board.js'\n\nclass Game extends React.Component{\n    render(){\n        return(\n            <div className=\"game\">\n                <div className=\"board\">\n                    <Board />\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}